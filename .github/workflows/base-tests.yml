name: Base tests

on:
  push:
    branches:
      - main
  pull_request:

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: ['1.7.3']
        julia-arch: [x64]
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            ort_url: 'https://github.com/microsoft/onnxruntime/releases/download/v1.11.0/onnxruntime-linux-x64-1.11.0.tgz'
            ort_archieve_name: 'onnxruntime-linux-x64-1.11.0.tgz'
            ort_dir: 'onnxruntime-linux-x64-1.11.0'
          - os: windows-latest
            ort_url: 'https://github.com/microsoft/onnxruntime/releases/download/v1.11.0/onnxruntime-win-x64-1.11.0.zip'
            ort_archieve_name: 'onnxruntime-win-x64-1.11.0.zip'
            ort_dir: 'onnxruntime-win-x64-1.11.0'
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2
      - uses: AnHeuermann/setup-openmodelica@main
        with:
          version: 'stable'

      #- name: Download ONNX Runtime
      #  run: |
      #    if [ "$RUNNER_OS" == "Linux" ]; then
      #      wget -q ${{ matrix.ort_url }}
      #      tar -xf ${{ matrix.ort_archieve_name }}
      #      rm ${{ matrix.ort_archieve_name }}
      #    elif [ "$RUNNER_OS" == "Windows" ]; then
      #      wget -q ${{ matrix.ort_url }}
      #      tar -xf ${{ matrix.ort_archieve_name }}
      #      rm ${{ matrix.ort_archieve_name }}
      #    else
      #          echo "$RUNNER_OS not supported"
      #          exit 1
      #    fi
      #  shell: bash

      - name: Download ONNX Runtime
        run: |
          wget -q ${{ matrix.ort_url }}
          tar -xf ${{ matrix.ort_archieve_name }}
          rm ${{ matrix.ort_archieve_name }}

      - name: Configure CMake
        run: cmake -S src/onnxWrapper -B src/onnxWrapper/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DORT_DIR=${{matrix.ort_archieve_name}}

      - name: Build C Sources
        run: cmake --build src/onnxWrapper/build --config ${{env.BUILD_TYPE}} --target all install

      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
